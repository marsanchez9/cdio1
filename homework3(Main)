from stac_client import STACClient
from image_processor import ImageProcessor  
from git_handler import GitHandler
import time

def main():
    # CONFIGURACIÓN DEL PROCESO
    DATE_RANGE = ("2025-01-01", "2025-06-30")
    CLOUD_THRESHOLD = 0.2
    AOI = {"type": "Polygon", "coordinates": [[...]]}  # Coordenadas reales
    
    # 1. INICIALIZAR COMPONENTES
    stac_client = STACClient()
    image_processor = ImageProcessor()
    git_handler = GitHandler()
    
    # 2. BUSCAR IMÁGENES EN CATÁLOGO STAC
    print("Querying STAC API...")
    items = stac_client.search(
        date_range=DATE_RANGE,
        aoi=AOI,
        cloud_cover=CLOUD_THRESHOLD
    )
    
    # 3. DESCARGAS COMPARATIVAS (1 vs 4 HILOS)
    # Single-thread
    start_time = time.time()
    single_thread_results = stac_client.download_images(items, max_workers=1)
    single_thread_time = time.time() - start_time
    
    # Multi-thread  
    start_time = time.time()
    multi_thread_results = stac_client.download_images(items, max_workers=4)
    multi_thread_time = time.time() - start_time
    
    download_metrics = {
        'single_thread': single_thread_time,
        'multi_thread': multi_thread_time,
        'speedup': single_thread_time / multi_thread_time
    }
    
    # 4. FILTRADO DE NUBES
    clean_images = image_processor.filter_cloudy_images(multi_thread_results)
    
    # 5. CÁLCULO NDWI COMPARATIVO (1 vs 4 PROCESOS)
    # Single-process
    start_time = time.time()
    single_process_ndwi = image_processor.calculate_ndwi_batch(clean_images, processes=1)
    single_process_time = time.time() - start_time
    
    # Multi-process
    start_time = time.time()
    multi_process_ndwi = image_processor.calculate_ndwi_batch(clean_images, processes=4)  
    multi_process_time = time.time() - start_time
    
    ndwi_metrics = {
        'single_process': single_process_time,
        'multi_process': multi_process_time, 
        'speedup': single_process_time / multi_process_time
    }
    
    # 6. PUBLICAR RESULTADOS
    git_handler.push_results(
        ndwi_results=multi_process_ndwi,
        download_metrics=download_metrics,
        ndwi_metrics=ndwi_metrics
    )
    
    print(f"Download speedup: {download_metrics['speedup']:.2f}x")
    print(f"NDWI calculation speedup: {ndwi_metrics['speedup']:.2f}x")

if __name__ == "__main__":
    main()

