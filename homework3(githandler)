
import git
import json
import os
from datetime import datetime
import shutil

class GitHandler:
    def __init__(self, repo_path=".", remote_url=None):
        self.repo_path = repo_path
        
        try:
            self.repo = git.Repo(repo_path)
            print(f"Found existing repo at {repo_path}")
        except git.exc.InvalidGitRepositoryError:
            print("Initializing new git repository...")
            self.repo = git.Repo.init(repo_path)
            
            if remote_url:
                self.repo.create_remote('origin', remote_url)
    
    def push_results(self, ndwi_results, download_metrics, ndwi_metrics, commit_message=None):
        """
        Guarda resultados en repositorio Git y pushea a remoto
        
        Args:
            ndwi_results: Lista de archivos NDWI generados
            download_metrics: Métricas de descarga
            ndwi_metrics: Métricas de procesamiento NDWI
            commit_message: Mensaje personalizado para commit
        """
        if not commit_message:
            commit_message = f"NDWI Results {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        try:
            # 1. Guardar métricas en archivo JSON
            metrics_data = {
                'timestamp': datetime.now().isoformat(),
                'download_performance': download_metrics,
                'ndwi_performance': ndwi_metrics,
                'processed_images': len(ndwi_results),
                'image_list': [os.path.basename(p) for p in ndwi_results]
            }
            
            metrics_path = os.path.join(self.repo_path, "processing_metrics.json")
            with open(metrics_path, 'w') as f:
                json.dump(metrics_data, f, indent=2)
            
            # 2. Crear README con resumen
            readme_content = self._generate_readme(metrics_data)
            with open(os.path.join(self.repo_path, "README.md"), 'w') as f:
                f.write(readme_content)
            
            # 3. Añadir todos los archivos nuevos al staging
            self.repo.git.add('--all')
            
            # 4. Hacer commit
            self.repo.index.commit(commit_message)
            print(f"Committed: {commit_message}")
            
            # 5. Push a remoto si existe
            if hasattr(self.repo.remotes, 'origin'):
                origin = self.repo.remotes.origin
                origin.push()
                print("Pushed to remote repository")
            else:
                print("No remote repository configured - changes committed locally")
                
        except Exception as e:
            print(f"Error in Git operations: {e}")
            raise
    
    def _generate_readme(self, metrics_data):
        """
        Genera archivo README con resumen de resultados
        """
        download_speedup = metrics_data['download_performance']['speedup']
        ndwi_speedup = metrics_data['ndwi_performance']['speedup']
        
        return f"""# NDWI Processing Results

## Summary
- **Processed Images**: {metrics_data['processed_images']}
- **Processing Date**: {metrics_data['timestamp']}

## Performance Metrics
- **Download Speedup (4 threads)**: {download_speedup:.2f}x
- **NDWI Calculation Speedup (4 processes)**: {ndwi_speedup:.2f}x

## Files
- `processing_metrics.json`: Detailed performance metrics
- `ndwi_*.tif`: NDWI GeoTIFF results
- `downloaded_images/`: Original satellite imagery

## Methodology
- **Data Source**: Sentinel-2 via STAC API
- **Cloud Filtering**: Scene Classification Layer (SCL)
- **NDWI Formula**: (Green - NIR) / (Green + NIR)
- **Parallel Processing**: ThreadPoolExecutor (downloads), ProcessPoolExecutor (NDWI)
"""
